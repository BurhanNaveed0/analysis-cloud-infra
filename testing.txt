Transform: AWS::Serverless-2016-10-31
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: "3.0"
        info: {}
        paths:
          /events:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetEvents.Arn}/invocations
              responses: {}
          /managers:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetManagers.Arn}/invocations
              responses: {}
          /attendees:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAttendees.Arn}/invocations
              responses: {}
          /events/checkedin:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCheckedIn.Arn}/invocations
              responses: {}
          /users/add:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddUser.Arn}/invocations
              responses: {}
          /managers/add:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddManager.Arn}/invocations
              responses: {}
          /attendees/add:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddAttendee.Arn}/invocations
              responses: {}
          /events/checkin:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckInAttendee.Arn}/invocations
              responses: {}
          /users:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsers.Arn}/invocations
              responses: {}
          /events/delete:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RemoveEvent.Arn}/invocations
              responses: {}
          /managers/delete:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RemoveManager.Arn}/invocations
              responses: {}
          /attendees/delete:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RemoveAttendee.Arn}/invocations
              responses: {}
          /users/delete:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RemoveUser.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  AddUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: AddUser
      CodeUri: src/Function
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Layers:
        - !Ref APILambdaLayer
      Events:
        ApiPOSTusersadd:
          Type: Api
          Properties:
            Path: /users/add
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          HANDLERSTORAGE_BUCKET_NAME: !Ref HandlerStorage
          HANDLERSTORAGE_BUCKET_ARN: !GetAtt HandlerStorage.Arn
          USERS_TABLE_NAME: !Ref Users
          USERS_TABLE_ARN: !GetAtt Users.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Users
  AddUserLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${AddUser}
  AddAttendee:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: AddAttendee
      CodeUri: src/Function2
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Layers:
        - !Ref APILambdaLayer
      Events:
        ApiPOSTattendeesadd:
          Type: Api
          Properties:
            Path: /attendees/add
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          HANDLERSTORAGE_BUCKET_NAME: !Ref HandlerStorage
          HANDLERSTORAGE_BUCKET_ARN: !GetAtt HandlerStorage.Arn
          ATTENDEES_TABLE_NAME: !Ref Attendees
          ATTENDEES_TABLE_ARN: !GetAtt Attendees.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Attendees
  AddAttendeeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${AddAttendee}
  RemoveAttendee:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: RemoveAttendee
      CodeUri: src/Function3
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Layers:
        - !Ref APILambdaLayer
      Events:
        ApiDELETEattendeesdelete:
          Type: Api
          Properties:
            Path: /attendees/delete
            Method: DELETE
            RestApiId: !Ref Api
      Environment:
        Variables:
          HANDLERSTORAGE_BUCKET_NAME: !Ref HandlerStorage
          HANDLERSTORAGE_BUCKET_ARN: !GetAtt HandlerStorage.Arn
          ATTENDEES_TABLE_NAME: !Ref Attendees
          ATTENDEES_TABLE_ARN: !GetAtt Attendees.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Attendees
  RemoveAttendeeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${RemoveAttendee}
  AddEvent:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: AddEvent
      CodeUri: src/Function4
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Layers:
        - !Ref APILambdaLayer
      Environment:
        Variables:
          HANDLERSTORAGE_BUCKET_NAME: !Ref HandlerStorage
          HANDLERSTORAGE_BUCKET_ARN: !GetAtt HandlerStorage.Arn
          EVENTS_TABLE_NAME: !Ref Events
          EVENTS_TABLE_ARN: !GetAtt Events.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Events
  AddEventLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${AddEvent}
  RemoveEvent:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: RemoveEvent
      CodeUri: src/Function5
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Layers:
        - !Ref APILambdaLayer
      Events:
        ApiDELETEeventsdelete:
          Type: Api
          Properties:
            Path: /events/delete
            Method: DELETE
            RestApiId: !Ref Api
      Environment:
        Variables:
          HANDLERSTORAGE_BUCKET_NAME: !Ref HandlerStorage
          HANDLERSTORAGE_BUCKET_ARN: !GetAtt HandlerStorage.Arn
          EVENTS_TABLE_NAME: !Ref Events
          EVENTS_TABLE_ARN: !GetAtt Events.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Events
  RemoveEventLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${RemoveEvent}
  Users:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  Attendees:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  Managers:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  AddManager:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: AddManager
      CodeUri: src/Function2
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Layers:
        - !Ref APILambdaLayer
      Events:
        ApiPOSTmanagersadd:
          Type: Api
          Properties:
            Path: /managers/add
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          HANDLERSTORAGE_BUCKET_NAME: !Ref HandlerStorage
          HANDLERSTORAGE_BUCKET_ARN: !GetAtt HandlerStorage.Arn
          MANAGERS_TABLE_NAME: !Ref Managers
          MANAGERS_TABLE_ARN: !GetAtt Managers.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Managers
  AddManagerLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${AddManager}
  RemoveManager:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: RemoveManager
      CodeUri: src/Function3
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Layers:
        - !Ref APILambdaLayer
      Events:
        ApiDELETEmanagersdelete:
          Type: Api
          Properties:
            Path: /managers/delete
            Method: DELETE
            RestApiId: !Ref Api
      Environment:
        Variables:
          HANDLERSTORAGE_BUCKET_NAME: !Ref HandlerStorage
          HANDLERSTORAGE_BUCKET_ARN: !GetAtt HandlerStorage.Arn
          MANAGERS_TABLE_NAME: !Ref Managers
          MANAGERS_TABLE_ARN: !GetAtt Managers.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Managers
  RemoveManagerLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${RemoveManager}
  CheckInAttendee:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: CheckInAttendee
      CodeUri: src/Function2
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Layers:
        - !Ref APILambdaLayer
      Events:
        ApiPOSTeventscheckin:
          Type: Api
          Properties:
            Path: /events/checkin
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          HANDLERSTORAGE_BUCKET_NAME: !Ref HandlerStorage
          HANDLERSTORAGE_BUCKET_ARN: !GetAtt HandlerStorage.Arn
          ATTENDEES_TABLE_NAME: !Ref Attendees
          ATTENDEES_TABLE_ARN: !GetAtt Attendees.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Attendees
  CheckInAttendeeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${CheckInAttendee}
  RemoveUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: RemoveUser
      CodeUri: src/Function2
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Layers:
        - !Ref APILambdaLayer
      Events:
        ApiDELETEusersdelete:
          Type: Api
          Properties:
            Path: /users/delete
            Method: DELETE
            RestApiId: !Ref Api
      Environment:
        Variables:
          HANDLERSTORAGE_BUCKET_NAME: !Ref HandlerStorage
          HANDLERSTORAGE_BUCKET_ARN: !GetAtt HandlerStorage.Arn
          USERS_TABLE_NAME: !Ref Users
          USERS_TABLE_ARN: !GetAtt Users.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Users
  RemoveUserLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${RemoveUser}
  GetEvents:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetEvents
      CodeUri: src/Function2
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Layers:
        - !Ref APILambdaLayer
      Events:
        ApiGETevents:
          Type: Api
          Properties:
            Path: /events
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          HANDLERSTORAGE_BUCKET_NAME: !Ref HandlerStorage
          HANDLERSTORAGE_BUCKET_ARN: !GetAtt HandlerStorage.Arn
          EVENTS_TABLE_NAME: !Ref Events
          EVENTS_TABLE_ARN: !GetAtt Events.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Events
  GetEventsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetEvents}
  APILambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Layer ${ResourceName}
        - ResourceName: APILambdaLayer
      ContentUri: src/Layer
      RetentionPolicy: Retain
  GetManagers:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetManagers
      CodeUri: src/Function2
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Layers:
        - !Ref APILambdaLayer
      Events:
        ApiGETmanagers:
          Type: Api
          Properties:
            Path: /managers
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          HANDLERSTORAGE_BUCKET_NAME: !Ref HandlerStorage
          HANDLERSTORAGE_BUCKET_ARN: !GetAtt HandlerStorage.Arn
          MANAGERS_TABLE_NAME: !Ref Managers
          MANAGERS_TABLE_ARN: !GetAtt Managers.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Managers
  GetManagersLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetManagers}
  GetAttendees:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetAttendees
      CodeUri: src/Function2
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Layers:
        - !Ref APILambdaLayer
      Events:
        ApiGETattendees:
          Type: Api
          Properties:
            Path: /attendees
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          HANDLERSTORAGE_BUCKET_NAME: !Ref HandlerStorage
          HANDLERSTORAGE_BUCKET_ARN: !GetAtt HandlerStorage.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}/*
  GetAttendeesLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAttendees}
  GetUsers:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetUsers
      CodeUri: src/Function2
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Layers:
        - !Ref APILambdaLayer
      Events:
        ApiGETusers:
          Type: Api
          Properties:
            Path: /users
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          HANDLERSTORAGE_BUCKET_NAME: !Ref HandlerStorage
          HANDLERSTORAGE_BUCKET_ARN: !GetAtt HandlerStorage.Arn
          USERS_TABLE_NAME: !Ref Users
          USERS_TABLE_ARN: !GetAtt Users.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Users
  GetUsersLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetUsers}
  GetCheckedIn:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetCheckedIn
      CodeUri: src/Function2
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Layers:
        - !Ref APILambdaLayer
      Events:
        ApiGETeventscheckedin:
          Type: Api
          Properties:
            Path: /events/checkedin
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          HANDLERSTORAGE_BUCKET_NAME: !Ref HandlerStorage
          HANDLERSTORAGE_BUCKET_ARN: !GetAtt HandlerStorage.Arn
          ATTENDEES_TABLE_NAME: !Ref Attendees
          ATTENDEES_TABLE_ARN: !GetAtt Attendees.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}
                - !Sub arn:${AWS::Partition}:s3:::${HandlerStorage}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Attendees
  GetCheckedInLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetCheckedIn}
  HandlerStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-handlerst-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  HandlerStorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref HandlerStorage
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: "2012-10-17"
        Statement:
          - Principal: "*"
            Action: "*"
            Effect: Deny
            Resource:
              - !GetAtt HandlerStorage.Arn
              - !Sub ${HandlerStorage.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: "false"
  Events:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
